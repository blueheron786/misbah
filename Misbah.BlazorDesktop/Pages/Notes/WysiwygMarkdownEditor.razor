@namespace Misbah.BlazorDesktop.Components.Pages.Notes
@using Misbah.Core.Models
@using Misbah.Core.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject MarkdownRenderer MarkdownRenderer
@implements IAsyncDisposable

<div id="wysiwyg-editor-@editorId" class="wysiwyg-markdown-editor" style="height: @Height; overflow-y: auto;">
    <div class="editor-content" 
         contenteditable="true"
         @onblur="OnContentBlur"
         @oninput="OnContentInput"
         @onkeydown="OnKeyDown"
         @ref="editorElement">
        @((MarkupString)renderedContent)
    </div>
</div>

@code {
    [Parameter] public string Content { get; set; } = "";
    [Parameter] public EventCallback<string> ContentChanged { get; set; }
    [Parameter] public string Height { get; set; } = "600px";
    [Parameter] public string Theme { get; set; } = "dark";

    private string editorId = Guid.NewGuid().ToString("N")[..8];
    private string renderedContent = "";
    private string lastKnownContent = "";
    private ElementReference editorElement;
    private DotNetObjectReference<WysiwygMarkdownEditor>? dotNetRef;

    protected override void OnInitialized()
    {
        dotNetRef = DotNetObjectReference.Create(this);
        UpdateRenderedContent();
    }

    protected override void OnParametersSet()
    {
        if (Content != lastKnownContent)
        {
            lastKnownContent = Content;
            UpdateRenderedContent();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("wysiwygMarkdownEditor.initialize", 
                $"wysiwyg-editor-{editorId}", dotNetRef);
        }
    }

    private void UpdateRenderedContent()
    {
        if (string.IsNullOrWhiteSpace(Content))
        {
            renderedContent = "<p class='placeholder'>Click here to start writing...</p>";
        }
        else
        {
            renderedContent = MarkdownRenderer.Render(Content, out var taskLines);
        }
    }

    private void OnContentInput(ChangeEventArgs e)
    {
        // No auto-save on input
    }

    private void OnContentBlur(FocusEventArgs e)
    {
        // No auto-save on blur
    }

    private void OnKeyDown(KeyboardEventArgs e)
    {
        // Optionally handle keyboard shortcuts for formatting, but no save
    }



    public async Task SaveAsync()
    {
        try
        {
            var html = await JSRuntime.InvokeAsync<string>("wysiwygMarkdownEditor.getContent", $"wysiwyg-editor-{editorId}");
            var markdown = await JSRuntime.InvokeAsync<string>("wysiwygMarkdownEditor.htmlToMarkdown", html);
            if (ContentChanged.HasDelegate && markdown != lastKnownContent)
            {
                lastKnownContent = markdown;
                await ContentChanged.InvokeAsync(markdown);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error converting HTML to markdown: {ex.Message}");
        }
    }

    [JSInvokable]
    public void OnEditorContentChanged(string html)
    {
        // No auto-save on content change
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            // Save on app/component close
            await SaveAsync();
            if (dotNetRef != null)
            {
                await JSRuntime.InvokeVoidAsync("wysiwygMarkdownEditor.dispose", $"wysiwyg-editor-{editorId}");
                dotNetRef.Dispose();
            }
        }
        catch
        {
            // Ignore disposal errors
        }
    }
}
