@using Misbah.Application.Interfaces
@using Misbah.Domain.Entities
@inject IFolderApplicationService FolderService

@* Explicit alias to avoid ambiguity between Domain and Core models *@
@using DomainFolderNode = Misbah.Domain.Entities.FolderNode

<div class="folder-tree">
    @if (folders != null)
    {
        @foreach (var folder in folders)
        {
            <div class="folder-item">
                <div class="folder-header" @onclick="() => ToggleFolder(folder)">
                    <span class="folder-icon">
                        @if (expandedFolders.Contains(folder.Path))
                        {
                            <text>üìÇ</text>
                        }
                        else
                        {
                            <text>üìÅ</text>
                        }
                    </span>
                    <span class="folder-name">@folder.Name</span>
                    @if (folder.Folders?.Any() == true)
                    {
                        <span class="folder-count">(@folder.Folders.Count)</span>
                    }
                </div>
                @if (expandedFolders.Contains(folder.Path) && folder.Folders?.Any() == true)
                {
                    <div class="folder-children">
                        <FolderTreeClean Folders="folder.Folders" OnFolderSelected="OnFolderSelected" />
                    </div>
                }
            </div>
        }
    }
</div>

@code {
    [Parameter] public IEnumerable<DomainFolderNode>? Folders { get; set; }
    [Parameter] public EventCallback<DomainFolderNode> OnFolderSelected { get; set; }

    private IEnumerable<DomainFolderNode>? folders;
    private HashSet<string> expandedFolders = new HashSet<string>();

    protected override async Task OnInitializedAsync()
    {
        if (Folders == null)
        {
            // Load root folders if no specific folders provided
            var rootPath = FolderService.GetRootPath();
            if (!string.IsNullOrEmpty(rootPath))
            {
                var rootFolder = await FolderService.LoadFolderTreeAsync(rootPath);
                folders = new List<DomainFolderNode> { rootFolder };
            }
        }
        else
        {
            folders = Folders;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Folders == null)
        {
            var rootPath = FolderService.GetRootPath();
            if (!string.IsNullOrEmpty(rootPath))
            {
                var rootFolder = await FolderService.LoadFolderTreeAsync(rootPath);
                folders = new List<DomainFolderNode> { rootFolder };
            }
        }
        else
        {
            folders = Folders;
        }
    }

    private async Task ToggleFolder(DomainFolderNode folder)
    {
        if (expandedFolders.Contains(folder.Path))
        {
            expandedFolders.Remove(folder.Path);
        }
        else
        {
            expandedFolders.Add(folder.Path);
        }

        await OnFolderSelected.InvokeAsync(folder);
        StateHasChanged();
    }
}

<style>
    .folder-tree {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        font-size: 14px;
        line-height: 1.4;
    }

    .folder-item {
        margin: 2px 0;
    }

    .folder-header {
        display: flex;
        align-items: center;
        padding: 4px 8px;
        cursor: pointer;
        border-radius: 4px;
        transition: background-color 0.2s ease;
    }

    .folder-header:hover {
        background-color: rgba(0, 123, 255, 0.1);
    }

    .folder-icon {
        margin-right: 8px;
        font-size: 16px;
    }

    .folder-name {
        flex-grow: 1;
        color: #333;
        font-weight: 500;
    }

    .folder-count {
        color: #666;
        font-size: 12px;
        margin-left: 8px;
    }

    .folder-children {
        margin-left: 20px;
        border-left: 1px solid #e0e0e0;
        padding-left: 8px;
    }

    @@media (prefers-color-scheme: dark) {
        .folder-name {
            color: #e0e0e0;
        }
        
        .folder-count {
            color: #a0a0a0;
        }
        
        .folder-header:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }
        
        .folder-children {
            border-left-color: #404040;
        }
    }
</style>