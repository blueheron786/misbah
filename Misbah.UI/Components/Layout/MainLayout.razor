@namespace Misbah.UI.Components.Layout
@using Misbah.Core.Services
@using Misbah.UI.Components.Pages.Notes
@using Misbah.UI.Components.Layout
@using Misbah.UI.Resources
@using Misbah.UI.Utils
@using Microsoft.JSInterop
@using System.IO


@using BlazorDesktop.Wpf
@inherits LayoutComponentBase


@inject Misbah.Core.Services.INoteService NoteService
@inject IJSRuntime JS
@inject BlazorDesktopWindow window

@using Misbah.Core.Utils
@using Misbah.UI.Components
@using Misbah.UI.Components.Pages.Notes
<link rel="stylesheet" href="css/search-popup.css" />
<script src="search-popup.js"></script>

@code {
    private string? _hubRoot;
    private string? _selectedNoteId;
    private static MainLayout? _instance;
    private bool _showSearchPopup = false;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JS.InvokeVoidAsync("eval", @"
                window.addEventListener('misbah-nav', function(e) {
                    if (e.detail && e.detail.title) {
                        DotNet.invokeMethodAsync('Misbah.UI', 'NavigateToNoteByTitle', e.detail.title);
                    }
                });
                window.addEventListener('show-search-popup', function() {
                    DotNet.invokeMethodAsync('Misbah.UI', 'ShowSearchPopup');
                });
            ");
        }
    }

    [JSInvokable("ShowSearchPopup")]
    public static void ShowSearchPopup()
    {
        if (_instance != null)
        {
            _instance._showSearchPopup = true;
            _instance.StateHasChanged();
        }
    }

    void OnSearchPopupClose()
    {
        _showSearchPopup = false;
        StateHasChanged();
    }

    void OnSearchNoteSelected(string noteId)
    {
        _selectedNoteId = noteId;
        _showSearchPopup = false;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        window.ToggleFullScreen();
        _instance = this;
        // Try to load last hub path from config
        var config = ConfigManager.Load();
        if (!string.IsNullOrEmpty(config.LastHubPath) && Directory.Exists(config.LastHubPath))
        {
            _hubRoot = config.LastHubPath;
            if (NoteService is Misbah.Core.Services.NoteService concrete)
            {
                concrete.SetRootPath(_hubRoot);
            }
        }
    }


    void OnHubSelected(string path)
    {
        _hubRoot = path;
        _selectedNoteId = null;
        // Update NoteService root path if possible
        if (NoteService is Misbah.Core.Services.NoteService concrete)
        {
            concrete.SetRootPath(path);
        }
        // Save to config
        var config = ConfigManager.Load();
        config.LastHubPath = path;
        ConfigManager.Save(config);
        StateHasChanged();
    }

    void OnNoteSelected(string noteId)
    {
        _selectedNoteId = noteId;
        StateHasChanged();
    }

    [JSInvokable("NavigateToNoteByTitle")]
    public static void NavigateToNoteByTitle(string title)
    {
        _instance?.NavigateToNoteByTitleInstance(title);
    }

    private void NavigateToNoteByTitleInstance(string title)
    {
        var note = NoteService.GetAllNotes().FirstOrDefault(n => n.Title == title);
        if (note != null)
        {
            _selectedNoteId = note.Id;
            StateHasChanged();
        }
    }
}

<div class="page" style="display:flex; flex-direction:row; height:100vh; min-height:0;">
    @if (_showSearchPopup)
    {
        <SearchPopup OnNoteSelected="OnSearchNoteSelected" OnClose="OnSearchPopupClose" />
    }
    @if (string.IsNullOrEmpty(_hubRoot))
    {
        <main style="flex:1 1 auto; display:flex; align-items:center; justify-content:center; flex-direction:column;">
            <HubPicker OnHubPicked="OnHubSelected" />
        </main>
    }
    else
    {
        <div class="sidebar-panel" style="height:100vh; min-height:0; display:flex; flex-direction:column;">
            <FolderTree RootPath="@_hubRoot" OnNoteSelected="OnNoteSelected" />
        </div>
        <main style="flex:1 1 auto; height:100vh; min-height:0; overflow:auto; display:flex; flex-direction:column;">
            <article class="content px-4" style="flex:1 1 auto; min-height:0;">
                @if (!string.IsNullOrEmpty(_selectedNoteId))
                {
                    <NoteView NoteId="@_selectedNoteId" />
                }
                else
                {
                    @Body
                }
            </article>
        </main>
    }
</div>
