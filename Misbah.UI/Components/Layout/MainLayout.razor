@using Misbah.UI.Components
@using Misbah.UI.Components.Pages.Notes
@using Misbah.UI.Components.Layout
@using Misbah.UI.Resources
@using Microsoft.JSInterop
@inherits LayoutComponentBase

@inject Misbah.Core.Services.INoteService NoteService
@inject IJSRuntime JS
@using Misbah.UI.Utils
@using System.IO

@code {
    private string? _hubRoot;
    private string? _selectedNoteId;
    private static MainLayout? _instance;
    private bool _shouldDumpHtml = true;


    protected override void OnInitialized()
    {
        _instance = this;
        // Try to load last hub path from config
        var config = ConfigManager.Load();
        if (!string.IsNullOrEmpty(config.LastHubPath) && Directory.Exists(config.LastHubPath))
        {
            _hubRoot = config.LastHubPath;
            if (NoteService is Misbah.Core.Services.NoteService concrete)
            {
                concrete.SetRootPath(_hubRoot);
            }
            // Try to select the last note automatically
            var notes = NoteService.GetAllNotes().ToList();
            if (notes.Count > 0)
            {
                // Try to find /Stats.md or fallback to first note
                var lastNote = notes.FirstOrDefault(n => n.Title == "/Stats.md") ?? notes.First();
                _selectedNoteId = lastNote.Id;
                _shouldDumpHtml = true;
            }
        }
    }


    void OnHubSelected(string path)
    {
        _hubRoot = path;
        _selectedNoteId = null;
        // Update NoteService root path if possible
        if (NoteService is Misbah.Core.Services.NoteService concrete)
        {
            concrete.SetRootPath(path);
        }
        // Save to config
        var config = ConfigManager.Load();
        config.LastHubPath = path;
        ConfigManager.Save(config);
        StateHasChanged();
    }

    async Task OnNoteSelected(string noteId)
    {
        _selectedNoteId = noteId;
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JS.InvokeVoidAsync("eval", @"
                window.addEventListener('misbah-nav', function(e) {
                    if (e.detail && e.detail.title) {
                        DotNet.invokeMethodAsync('Misbah.UI', 'NavigateToNoteByTitle', e.detail.title);
                    }
                });
                window.misbahDebug = {
                    sendContentHtmlToDotNet: function() {
                        var el = document.querySelector('article.content');
                        if (el) {
                            DotNet.invokeMethodAsync('Misbah.UI', 'ReceiveRenderedHtml', el.innerHTML);
                        } else {
                            DotNet.invokeMethodAsync('Misbah.UI', 'ReceiveRenderedHtml', 'NO_CONTENT_FOUND');
                        }
                    }
                };
            ");
        }
        // After JS is injected and note is set, dump HTML if needed
        if (_shouldDumpHtml && !string.IsNullOrEmpty(_selectedNoteId))
        {
            _shouldDumpHtml = false;
            JS.InvokeVoidAsync("misbahDebug.sendContentHtmlToDotNet");
        }
    }
    [JSInvokable("ReceiveRenderedHtml")]
    public static void ReceiveRenderedHtml(string html)
    {
        try
        {
            var workspaceRoot = Path.GetFullPath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..", "..", "..", ".."));
            var path = Path.Combine(workspaceRoot, "RenderedContent.html");
            File.WriteAllText(path, html);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        // Removed Environment.Exit(0); to prevent app from freezing
    }

    [JSInvokable("NavigateToNoteByTitle")]
    public static void NavigateToNoteByTitle(string title)
    {
        _instance?.NavigateToNoteByTitleInstance(title);
    }

    private void NavigateToNoteByTitleInstance(string title)
    {
        var note = NoteService.GetAllNotes().FirstOrDefault(n => n.Title == title);
        if (note != null)
        {
            _selectedNoteId = note.Id;
            StateHasChanged();
        }
    }
}

<div class="page">
    @if (string.IsNullOrEmpty(_hubRoot))
    {
        <main style="width:100vw; height:100vh; display:flex; align-items:center; justify-content:center; flex-direction:column;">
            <HubPicker OnHubPicked="OnHubSelected" />
        </main>
    }
    else
    {
        <div class="sidebar-panel">
            <FolderTree RootPath="@_hubRoot" OnNoteSelected="OnNoteSelected" />
        </div>
        <main>
            <!-- GitHub repo link removed -->
            <article class="content px-4">
                @if (!string.IsNullOrEmpty(_selectedNoteId))
                {
                    <NoteView NoteId="@_selectedNoteId" />
                }
                else
                {
                    @Body
                }
            </article>
        </main>
    }
</div>
