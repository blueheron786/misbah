@namespace Misbah.UI.Components.Pages.Notes
@using Misbah.Core.Models
@using Misbah.UI.Resources
@inject Misbah.Core.Services.IFolderService FolderService

@code {
    [Parameter] public string? RootPath { get; set; }
    [Parameter] public EventCallback<string> OnNoteSelected { get; set; }
    private FolderNode? _rootFolder;
    private static HashSet<string> _expandedFolders = new();

protected override void OnParametersSet()
{
    if (!string.IsNullOrEmpty(RootPath))
    {
        _rootFolder = FolderService.LoadFolderTree(RootPath);
        if (_expandedFolders.Count == 0 && _rootFolder != null)
            _expandedFolders.Add(_rootFolder.Path);
    }
}

    void ToggleFolder(string path)
    {
        if (_expandedFolders.Contains(path))
            _expandedFolders.Remove(path);
        else
            _expandedFolders.Add(path);
    }

    private RenderFragment RenderFolder(FolderNode folder)
    {
        // Hide dot folders
        if (!string.IsNullOrEmpty(folder.Name) && folder.Name.StartsWith("."))
            return builder => { };

        return builder =>
        {
            int seq = 0;
            builder.OpenElement(seq++, "li");
            // Folder label
            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "class", "folder-label");
            builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, () => OnFolderClicked(folder.Path)));

            // FontAwesome expand/collapse icon
            if (_expandedFolders.Contains(folder.Path))
            {
                builder.OpenElement(seq++, "i");
                builder.AddAttribute(seq++, "class", "fa fa-chevron-down fa-fw");
                builder.CloseElement();
                // Open folder icon (yellow)
                builder.OpenElement(seq++, "i");
                builder.AddAttribute(seq++, "class", "fa fa-folder-open fa-fw");
                builder.AddAttribute(seq++, "style", "color:#fbc02d");
                builder.CloseElement();
            }
            else
            {
                builder.OpenElement(seq++, "i");
                builder.AddAttribute(seq++, "class", "fa fa-chevron-right fa-fw");
                builder.CloseElement();
                // Closed folder icon (yellow)
                builder.OpenElement(seq++, "i");
                builder.AddAttribute(seq++, "class", "fa fa-folder fa-fw");
                builder.AddAttribute(seq++, "style", "color:#fbc02d");
                builder.CloseElement();
            }
            builder.AddContent(seq++, " ");
            builder.AddContent(seq++, folder.Name);
            builder.CloseElement();

            if (_expandedFolders.Contains(folder.Path))
            {
                builder.OpenElement(seq++, "ul");
                foreach (var sub in folder.Folders)
                {
                    builder.AddContent(seq++, RenderFolder(sub));
                }
                foreach (var note in folder.Notes)
                {
                    builder.AddContent(seq++, RenderNote(note));
                }
                builder.CloseElement();
            }
            builder.CloseElement();
        };
    }

    private RenderFragment RenderNote(Note note)
    {
        return builder =>
        {
            int seq = 0;
            builder.OpenElement(seq++, "li");
            builder.AddAttribute(seq++, "class", "note-leaf");
            builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, async () => await OnNoteClicked(note.Id)));
            // Note icon
            builder.OpenElement(seq++, "i");
            builder.AddAttribute(seq++, "class", "fa fa-file-alt fa-fw");
            builder.CloseElement();
            builder.AddContent(seq++, " ");
            builder.AddContent(seq++, note.Title);
            builder.CloseElement();
        };
    }

    private void OnFolderClicked(string path)
    {
        ToggleFolder(path);
        StateHasChanged();
    }

    private async Task OnNoteClicked(string noteId)
    {
        await OnNoteSelected.InvokeAsync(noteId);
    }
}

@if (_rootFolder != null)
{
    <div class="folder-tree-container">
        <div class="folder-tree">
            <ul>
                @RenderFolder(_rootFolder)
            </ul>
        </div>
        <div class="folder-tree-resizer"></div>
    </div>
}
else
{
    <div class="folder-tree-container">
        <div class="folder-tree"><em>@AppStrings.NoFoldersFound</em></div>
        <div class="folder-tree-resizer"></div>
    </div>
}


