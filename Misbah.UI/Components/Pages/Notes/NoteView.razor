
@page "/notes/{NoteId}"
@using Misbah.Core.Models
@using Misbah.UI.Resources
@using Microsoft.JSInterop
@using Markdig
@inject Misbah.Core.Services.INoteService NoteService
@inject IJSRuntime JSRuntime

@code {

    private static NoteView? _instance;
    private static bool _jsHandlerRegistered = false;

    [Parameter] public string? NoteId { get; set; }
    private Note? note;
    private bool editMode = false;
    private string? editedContent;

    [JSInvokable("ToggleTask")]
    public static async Task ToggleTask(int line)
    {
        if (_instance != null && _instance.note != null && !string.IsNullOrEmpty(_instance.NoteId))
        {
            var lines = _instance.note.Content.Split('\n');
            if (line >= 0 && line < lines.Length)
            {
                var taskPattern = @"^- \[( |x)\] (.*)$";
                var match = System.Text.RegularExpressions.Regex.Match(lines[line], taskPattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                if (match.Success)
                {
                    bool isChecked = match.Groups[1].Value.ToLower() == "x";
                    string newLine = isChecked ? "- [ ] " + match.Groups[2].Value : "- [x] " + match.Groups[2].Value;
                    lines[line] = newLine;
                    _instance.note.Content = string.Join("\n", lines);
                    _instance.NoteService.SaveNote(_instance.note);
                    // Reload the note from storage to ensure latest content
                    _instance.note = _instance.NoteService.LoadNote(_instance.NoteId);
                    _instance.editedContent = _instance.note.Content;
                    await _instance.InvokeAsync(_instance.StateHasChanged);
                }
            }
        }
    }
    
    protected override void OnParametersSet()
    {
        _instance = this;
        if (!string.IsNullOrEmpty(NoteId))
        {
            note = NoteService.LoadNote(NoteId);
            editedContent = note?.Content;
            editMode = false;
        }
    }

    void ToggleEdit()
    {
        editMode = !editMode;
        if (editMode && note != null)
            editedContent = note.Content;
    }

    void Save()
    {
        if (note != null && editedContent != null)
        {
            note.Content = editedContent;
            NoteService.SaveNote(note);
            editMode = false;
        }
    }

    // Render markdown line-by-line, inject custom checkboxes for task lists, and process wiki/external links
    MarkupString RenderMarkdownWithLinks(string? content)
    {
        // Register JS event handler for checkbox toggles (only once)
        if (!_jsHandlerRegistered)
        {
            _jsHandlerRegistered = true;
            _ = JSRuntime.InvokeVoidAsync("eval", @"
                window.addEventListener('misbah-task-toggle', function(e) {
                    if (e.detail && typeof DotNet !== 'undefined') {
                        DotNet.invokeMethodAsync('Misbah.UI', 'ToggleTask', e.detail.line);
                    }
                });
            ");
        }


        // Render markdown line-by-line, inject custom checkboxes for task lists, and process wiki/external links
        string[] lines = (content ?? "").Split('\n');
        var htmlLines = new List<string>();
        bool inList = false;
        bool inCodeBlock = false;
        for (int i = 0; i < lines.Length; i++)
        {
            // Code block start/end
            if (lines[i].TrimStart().StartsWith("```"))
            {
                if (!inCodeBlock) {
                    htmlLines.Add("<pre><code>");
                    inCodeBlock = true;
                } else {
                    htmlLines.Add("</code></pre>");
                    inCodeBlock = false;
                }
                continue;
            }
            if (inCodeBlock)
            {
                htmlLines.Add(System.Net.WebUtility.HtmlEncode(lines[i]) + "\n");
                continue;
            }
            var match = System.Text.RegularExpressions.Regex.Match(lines[i], @"^- \[( |x)\] (.*)$", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            if (match.Success)
            {
                if (!inList) { htmlLines.Add("<ul>"); inList = true; }
                bool isChecked = match.Groups[1].Value.ToLower() == "x";
                string taskText = match.Groups[2].Value;
                string checkbox = $"<input type='checkbox' class='md-task' data-line='{i}' {(isChecked ? "checked" : "")} onclick=\"window.dispatchEvent(new CustomEvent('misbah-task-toggle',{{detail:{{line:{i}}}}}));\">";
                htmlLines.Add($"<li>{checkbox} {System.Net.WebUtility.HtmlEncode(taskText)}</li>");
            }
            else
            {
                if (inList) { htmlLines.Add("</ul>"); inList = false; }
                // Inline code: `code`
                var inlineCode = System.Text.RegularExpressions.Regex.Replace(
                    lines[i],
                    "`([^`]+)`",
                    m => $"<code>{System.Net.WebUtility.HtmlEncode(m.Groups[1].Value)}</code>");
                // Render non-task, non-code lines with Markdig (for formatting, links, etc.)
                var lineHtml = Markdig.Markdown.ToHtml(inlineCode);
                if (lineHtml.StartsWith("<p>") && lineHtml.EndsWith("</p>\n"))
                    lineHtml = lineHtml.Substring(3, lineHtml.Length - 8);
                htmlLines.Add(lineHtml);
            }
        }
        if (inList) { htmlLines.Add("</ul>"); }
        var html = string.Join("", htmlLines);

        // Add globe emoji to all <a href="http(s)://..."> links
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<a ([^>]*href=""https?://[^""]+""[^>]*)>(.*?)</a>",
            m => $"<a {m.Groups[1].Value}>{m.Groups[2].Value}</a> 🌐",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase);

        // Replace [[Page Name]] with internal anchor tags
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"\[\[([^\]]+)\]\]",
            new System.Text.RegularExpressions.MatchEvaluator(m =>
            {
                var page = m.Groups[1].Value.Replace("\"", "&quot;");
                var linkHtml = "<a href=\"#\" onclick=\"window.dispatchEvent(new CustomEvent('misbah-nav', { detail: { title: '" + page + "' } }));return false;\">" + page + "</a>";
                return linkHtml;
            }),
            System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        return (MarkupString)html;
    }
}

@if (note != null)
{
    <div class="note-view">
        <h2>@note.Title</h2>
        <button @onclick="ToggleEdit">@(editMode ? AppStrings.Cancel : AppStrings.Edit)</button>
        @if (editMode)
        {
            <textarea @bind="editedContent" rows="20" style="width:100%"></textarea>
            <button @onclick="Save">@AppStrings.Save</button>
        }
        else
        {
            <div class="markdown-body">@RenderMarkdownWithLinks(note.Content)</div>
        }
    </div>
}
else
{
    <p>@AppStrings.SelectNoteToViewOrEdit</p>
}
