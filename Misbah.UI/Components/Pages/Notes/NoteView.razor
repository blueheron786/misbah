@page "/notes/{NoteId}"
@using Misbah.Core.Models
@using Misbah.UI.Resources
@inject Misbah.Core.Services.INoteService NoteService

@code {
    [Parameter] public string NoteId { get; set; }
    private Note note;
    private bool editMode = false;
    private string editedContent;

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(NoteId))
        {
            note = NoteService.LoadNote(NoteId);
            editedContent = note.Content;
            editMode = false;
        }
    }

    void ToggleEdit()
    {
        editMode = !editMode;
        if (editMode)
            editedContent = note.Content;
    }

    void Save()
    {
        note.Content = editedContent;
        NoteService.SaveNote(note);
        editMode = false;
    }

    // Render markdown and convert [[Page Name]] to links
    MarkupString RenderMarkdownWithLinks(string content)
    {
        // 0. Replace markdown task list with clickable checkboxes
        string taskPattern = @"^- \[( |x)\] (.*)$";
        string[] lines = (content ?? "").Split('\n');
        for (int i = 0; i < lines.Length; i++)
        {
            var match = System.Text.RegularExpressions.Regex.Match(lines[i], taskPattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            if (match.Success)
            {
                bool isChecked = match.Groups[1].Value.ToLower() == "x";
                string taskText = match.Groups[2].Value;
                string checkbox = $"<input type='checkbox' class='md-task' data-line='{i}' {(isChecked ? "checked" : "")} onclick=\"window.dispatchEvent(new CustomEvent('misbah-task-toggle',{{detail:{{line:{i}}}}}));\">";
                lines[i] = checkbox + " " + System.Net.WebUtility.HtmlEncode(taskText);
            }
        }
        var html = string.Join("<br>", lines);

        // 1. Add globe emoji to all <a href="http(s)://..."> links (Markdown [text](url) and bare URLs)
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<a ([^>]*href=""https?://[^""]+""[^>]*)>(.*?)</a>",
            m => $"<a {m.Groups[1].Value}>{m.Groups[2].Value}</a> 🌐",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase);

        // 2. Replace [[Page Name]] with internal anchor tags (no emoji)
        html = System.Text.RegularExpressions.Regex.Replace(
            html,
            @"\[\[([^\]]+)\]\]",
            new System.Text.RegularExpressions.MatchEvaluator(m =>
            {
                var page = m.Groups[1].Value.Replace("\"", "&quot;");
                var linkHtml = "<a href=\"#\" onclick=\"window.dispatchEvent(new CustomEvent('misbah-nav', { detail: { title: '" + page + "' } }));return false;\">" + page + "</a>";
                return linkHtml;
            }),
            System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        return (MarkupString)html;
    }
}

@if (note != null)
{
    <div class="note-view">
        <h2>@note.Title</h2>
        <button @onclick="ToggleEdit">@(editMode ? AppStrings.Cancel : AppStrings.Edit)</button>
        @if (editMode)
        {
            <textarea @bind="editedContent" rows="20" style="width:100%"></textarea>
            <button @onclick="Save">@AppStrings.Save</button>
        }
        else
        {
            <div class="markdown-body">@RenderMarkdownWithLinks(note.Content)</div>
        }
    </div>
}
else
{
    <p>@AppStrings.SelectNoteToViewOrEdit</p>
}
