
<style>
.misbah-code {
    background: #23272e;
    color: #e6e6e6;
    font-family: 'Fira Mono', 'Consolas', 'Menlo', 'Monaco', monospace;
    font-size: 0.98em;
    border-radius: 4px;
    padding: 0.2em 0.5em;
    margin: 0.1em 0;
    display: inline-block;
    white-space: pre;
}
pre.misbah-code {
    display: block;
    padding: 1em;
    overflow-x: auto;
}
</style>
@page "/notes/{NoteId}"
@using Misbah.Core.Models
@using Misbah.UI.Resources
@using Microsoft.JSInterop
@using Markdig
@inject Misbah.Core.Services.INoteService NoteService
@inject IJSRuntime JSRuntime
@inject Misbah.Core.Services.MarkdownRenderer MarkdownRenderer

<style>
.misbah-code {
    background: #23272e;
    color: #e6e6e6;
    font-family: 'Fira Mono', 'Consolas', 'Menlo', 'Monaco', monospace;
    font-size: 0.98em;
    border-radius: 4px;
    padding: 0.2em 0.5em;
    margin: 0.1em 0;
    display: inline-block;
    white-space: pre;
}
pre.misbah-code {
    display: block;
    padding: 1em;
    overflow-x: auto;
}
</style>

@code {

    private static NoteView? _instance;
    private static bool _jsHandlerRegistered = false;

    [Parameter] public string? NoteId { get; set; }
    private Note? note;
    private bool editMode = false;
    private string? editedContent;

    [JSInvokable("ToggleTask")]
    public static async Task ToggleTask(int line)
    {
        if (_instance != null && _instance.note != null && !string.IsNullOrEmpty(_instance.NoteId))
        {
            var lines = _instance.note.Content.Split('\n');
            if (line >= 0 && line < lines.Length)
            {
                var taskPattern = @"^- \[( |x)\] (.*)$";
                var match = System.Text.RegularExpressions.Regex.Match(lines[line], taskPattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                if (match.Success)
                {
                    bool isChecked = match.Groups[1].Value.ToLower() == "x";
                    string newLine = isChecked ? "- [ ] " + match.Groups[2].Value : "- [x] " + match.Groups[2].Value;
                    lines[line] = newLine;
                    _instance.note.Content = string.Join("\n", lines);
                    _instance.NoteService.SaveNote(_instance.note);
                    // Reload the note from storage to ensure latest content
                    _instance.note = _instance.NoteService.LoadNote(_instance.NoteId);
                    _instance.editedContent = _instance.note.Content;
                    await _instance.InvokeAsync(_instance.StateHasChanged);
                }
            }
        }
    }
    
    protected override void OnParametersSet()
    {
        _instance = this;
        if (!string.IsNullOrEmpty(NoteId))
        {
            note = NoteService.LoadNote(NoteId);
            editedContent = note?.Content;
            editMode = false;
        }
    }

    void ToggleEdit()
    {
        editMode = !editMode;
        if (editMode && note != null)
            editedContent = note.Content;
    }

    void Save()
    {
        if (note != null && editedContent != null)
        {
            note.Content = editedContent;
            NoteService.SaveNote(note);
            editMode = false;
        }
    }


    // Main markdown renderer using shared MarkdownRenderer
    MarkupString RenderMarkdownWithLinks(string? content)
    {
        if (!_jsHandlerRegistered)
        {
            _jsHandlerRegistered = true;
            _ = JSRuntime.InvokeVoidAsync("eval", @"
                window.addEventListener('misbah-task-toggle', function(e) {
                    if (e.detail && typeof DotNet !== 'undefined') {
                        DotNet.invokeMethodAsync('Misbah.UI', 'ToggleTask', e.detail.line);
                    }
                });
            ");
        }
        var html = MarkdownRenderer.RenderFull(content, out var _);
        return (MarkupString)html;
    }

    // Helper: Add globe emoji to external links
    private string AddExternalLinkEmoji(string html)
    {
        return System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<a ([^>]*href=""https?://[^""]+""[^>]*)>(.*?)</a>",
            m => $"<a {m.Groups[1].Value}>{m.Groups[2].Value}</a> 🌐",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    }

    // Helper: Replace [[Page Name]] with internal anchor tags
    private string ReplaceWikiLinks(string html)
    {
        return System.Text.RegularExpressions.Regex.Replace(
            html,
            @"\[\[([^\]]+)\]\]",
            new System.Text.RegularExpressions.MatchEvaluator(m =>
            {
                var page = m.Groups[1].Value.Replace("\"", "&quot;");
                var linkHtml = "<a href=\"#\" onclick=\"window.dispatchEvent(new CustomEvent('misbah-nav', { detail: { title: '" + page + "' } }));return false;\">" + page + "</a>";
                return linkHtml;
            }),
            System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    }
}

@if (note != null)
{
    <div class="note-view">
        <h2>@note.Title</h2>
        <button @onclick="ToggleEdit">@(editMode ? AppStrings.Cancel : AppStrings.Edit)</button>
        @if (editMode)
        {
            <textarea @bind="editedContent" rows="20" style="width:100%"></textarea>
            <button @onclick="Save">@AppStrings.Save</button>
        }
        else
        {
            <div style="display:flex;align-items:center;gap:1em;">
                <div class="markdown-body" style="flex:1;">@RenderMarkdownWithLinks(note.Content)</div>
            </div>
        }
@code {

}
    </div>
}
else
{
    <p>@AppStrings.SelectNoteToViewOrEdit</p>
}
