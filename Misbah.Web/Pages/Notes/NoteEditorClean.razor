@using Misbah.Application.Interfaces
@using Misbah.Domain.Entities
@using Misbah.Web.Resources
@using Misbah.Web.Pages.Notes
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@implements IDisposable
@inject INoteApplicationService NoteService
@inject IJSRuntime JS
@inject ILogger<NoteEditorClean> Logger

@* Explicit alias to avoid ambiguity between Domain and Core models *@
@using DomainNote = Misbah.Domain.Entities.Note

<!-- Toast notification container -->
<div id="toast-container" class="toast-container"></div>

<div class="note-editor-wrapper">
    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p>Loading note...</p>
        </div>
    }
    else if (note != null && !isError)
    {
        <div class="note-editor-container">
            <!-- Header with controls -->
            <div class="note-editor-header">
                <div class="note-title-section">
                    @if (isEditingTitle)
                    {
                        <input @bind="editingTitle" 
                               @onblur="SaveTitle" 
                               @onkeypress="OnTitleKeyPress"
                               class="title-input" 
                               placeholder="Enter note title..." />
                    }
                    else
                    {
                        <h2 class="note-title" @onclick="StartTitleEdit">@note.Title</h2>
                    }
                    
                    @if (note.Tags?.Any() == true)
                    {
                        <div class="note-tags">
                            @foreach (var tag in note.Tags)
                            {
                                <span class="tag">@tag</span>
                            }
                        </div>
                    }
                </div>

                <div class="editor-controls">
                    <button class="control-btn" @onclick="ToggleEditorMode" title="@(useLiveView ? "Switch to Classic Editor" : "Switch to Live Editor")">
                        <span class="icon">@(useLiveView ? "üìù" : "üëÅÔ∏è")</span>
                        <span class="text">@(useLiveView ? "Classic" : "Live")</span>
                    </button>
                    
                    @if (!useLiveView)
                    {
                        <button class="control-btn" @onclick="TogglePreview" title="@(showPreview ? "Show Editor" : "Show Preview")">
                            <span class="icon">@(showPreview ? "‚úèÔ∏è" : "üëÅÔ∏è")</span>
                            <span class="text">@(showPreview ? "Edit" : "Preview")</span>
                        </button>
                    }
                    
                    <button class="control-btn" @onclick="ToggleTheme" title="Toggle Theme">
                        <span class="icon">@(currentTheme == "light" ? "üåô" : "‚òÄÔ∏è")</span>
                        <span class="text">@(currentTheme == "light" ? "Dark" : "Light")</span>
                    </button>
                    
                    <button class="control-btn save-btn @(isDirty ? "dirty" : "")" @onclick="ManualSave" title="Save Note">
                        <span class="icon">üíæ</span>
                        <span class="text">Save</span>
                    </button>
                </div>
            </div>

            <!-- Content area -->
            <div class="note-content @currentTheme">
                @if (showPreview && !useLiveView)
                {
                    <div class="markdown-preview">
                        @if (!string.IsNullOrEmpty(note.Content))
                        {
                            @((MarkupString)Markdig.Markdown.ToHtml(note.Content))
                        }
                        else
                        {
                            <div class="empty-content">
                                <p class="empty-message">This note is empty. Click "Edit" to start writing.</p>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="editor-container">
                        @if (useLiveView)
                        {
                            <TrueLiveMarkdownEditor @ref="liveEditor"
                                                    Content="@(note.Content ?? "")"
                                                    ContentChanged="OnContentChanged"
                                                    Height="@editorHeight"
                                                    Theme="@currentTheme" />
                        }
                        else
                        {
                            <WysiwygMarkdownEditor @ref="classicEditor"
                                                   Content="@(note.Content ?? "")"
                                                   ContentChanged="OnContentChanged"
                                                   Height="@editorHeight"
                                                   Theme="@currentTheme" />
                        }
                    </div>
                }
            </div>

            <!-- Status bar -->
            <div class="status-bar">
                <div class="status-left">
                    <span class="status-item">@GetWordCount() words</span>
                    <span class="status-item">@GetCharCount() characters</span>
                    @if (note.Modified != default)
                    {
                        <span class="status-item">Modified: @note.Modified.ToString("MMM dd, yyyy HH:mm")</span>
                    }
                </div>
                <div class="status-right">
                    @if (isDirty)
                    {
                        <span class="status-item unsaved">‚óè Unsaved</span>
                    }
                    else
                    {
                        <span class="status-item saved">‚úì Saved</span>
                    }
                </div>
            </div>
        </div>
    }
    else if (isError)
    {
        <div class="error-container">
            <div class="error-icon">‚ö†Ô∏è</div>
            <h3>Error Loading Note</h3>
            <p>@errorMessage</p>
            @if (!string.IsNullOrEmpty(NoteId))
            {
                <button class="retry-btn" @onclick="LoadNoteAsync">Retry</button>
            }
        </div>
    }
    else
    {
        <div class="no-note-container">
            <div class="no-note-icon">üìù</div>
            <h3>No Note Selected</h3>
            <p>@AppStrings.SelectNoteToViewOrEdit</p>
        </div>
    }
</div>

@code {
    [Parameter] public string? NoteId { get; set; }
    [Parameter] public EventCallback<DomainNote> OnNoteChanged { get; set; }

    private DomainNote? note;
    private bool isLoading = false;
    private bool isError = false;
    private string errorMessage = string.Empty;
    private bool isDirty = false;
    private bool isEditingTitle = false;
    private string editingTitle = string.Empty;
    
    // Editor state
    private bool useLiveView = true;
    private bool showPreview = false;
    private string currentTheme = "light";
    private string editorHeight = "calc(100vh - 180px)";
    
    // Editor references
    private TrueLiveMarkdownEditor? liveEditor;
    private WysiwygMarkdownEditor? classicEditor;
    
    // Auto-save timer
    private System.Threading.Timer? autoSaveTimer;
    private readonly int autoSaveDelayMs = 2000; // 2 seconds
    
    // JavaScript interop for Ctrl+S handling
    private DotNetObjectReference<NoteEditorClean>? dotNetRef;
    private bool isCtrlSRegistered = false;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(NoteId))
        {
            await LoadNoteAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isCtrlSRegistered)
        {
            Logger.LogInformation("üîß OnAfterRenderAsync - Starting save function registration");
            
            // Register Ctrl+S functionality
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("blazorHelpers.registerSaveFunction", dotNetRef, nameof(HandleCtrlS));
            isCtrlSRegistered = true;
            
            Logger.LogInformation("‚úÖ OnAfterRenderAsync - Save function registration completed");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(NoteId))
        {
            if (note?.Id != NoteId)
            {
                await LoadNoteAsync();
            }
        }
        else
        {
            note = null;
            isError = false;
            isDirty = false;
        }
    }

    private async Task LoadNoteAsync()
    {
        if (string.IsNullOrEmpty(NoteId)) return;

        isLoading = true;
        isError = false;
        StateHasChanged();

        try
        {
            note = await NoteService.LoadNoteAsync(NoteId);
            isDirty = false;
            
            if (note != null)
            {
                Logger.LogInformation("Loaded note: {NoteTitle}", note.Title);
            }
        }
        catch (Exception ex)
        {
            isError = true;
            errorMessage = $"Failed to load note: {ex.Message}";
            Logger.LogError(ex, "Error loading note {NoteId}", NoteId);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OnContentChanged(string content)
    {
        if (note != null && note.Content != content)
        {
            note.Content = content;
            isDirty = true;
            
            // Reset auto-save timer
            autoSaveTimer?.Dispose();
            autoSaveTimer = new System.Threading.Timer(async _ => await AutoSave(), null, autoSaveDelayMs, Timeout.Infinite);
            
            StateHasChanged();
        }
    }

    private async Task AutoSave()
    {
        if (isDirty && note != null)
        {
            await SaveNoteInternal();
        }
    }

    private async Task ManualSave()
    {
        if (note != null)
        {
            await SaveNoteInternal();
        }
    }

    private async Task SaveNoteInternal()
    {
        if (note == null) return;

        try
        {
            note.Modified = DateTime.Now;
            
            // Extract tags from content
            note.Tags = NoteService.ExtractTags(note.Content ?? string.Empty);
            
            await NoteService.SaveNoteAsync(note);
            isDirty = false;
            
            await OnNoteChanged.InvokeAsync(note);
            await InvokeAsync(StateHasChanged);
            
            // Show success toast
            await JS.InvokeVoidAsync("eval", "window.misbah.api.toast.success('Note saved successfully! ‚úì')");
            
            Logger.LogInformation("Saved note: {NoteTitle}", note.Title);
        }
        catch (Exception ex)
        {
            // Show error toast
            await JS.InvokeVoidAsync("eval", "window.misbah.api.toast.error('Failed to save note')");
            Logger.LogError(ex, "Error saving note {NoteId}", note.Id);
        }
    }

    private void StartTitleEdit()
    {
        if (note != null)
        {
            isEditingTitle = true;
            editingTitle = note.Title;
            StateHasChanged();
        }
    }

    private async Task SaveTitle()
    {
        if (note != null && !string.IsNullOrWhiteSpace(editingTitle) && editingTitle != note.Title)
        {
            note.Title = editingTitle.Trim();
            isDirty = true;
            await SaveNoteInternal();
        }
        
        isEditingTitle = false;
        StateHasChanged();
    }

    private async Task OnTitleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SaveTitle();
        }
        else if (e.Key == "Escape")
        {
            isEditingTitle = false;
            StateHasChanged();
        }
    }

    private Task ToggleEditorMode()
    {
        useLiveView = !useLiveView;
        if (useLiveView)
        {
            showPreview = false; // Live view doesn't use separate preview
        }
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task TogglePreview()
    {
        showPreview = !showPreview;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task ToggleTheme()
    {
        currentTheme = currentTheme == "light" ? "dark" : "light";
        StateHasChanged();
        return Task.CompletedTask;
    }

    private int GetWordCount()
    {
        if (note?.Content?.IsEmpty != false) return 0;
        return note.Content.WordCount;
    }

    private int GetCharCount()
    {
        return note?.Content?.CharacterCount ?? 0;
    }

    [JSInvokable]
    public async Task HandleCtrlS()
    {
        Logger.LogInformation("üî• HandleCtrlS called from JavaScript at {Time}", DateTime.Now);
        await ManualSave();
    }

    public void Dispose()
    {
        autoSaveTimer?.Dispose();
        
        // Unregister Ctrl+S functionality
        if (isCtrlSRegistered && dotNetRef != null)
        {
            try
            {
                JS.InvokeVoidAsync("blazorHelpers.unregisterSaveFunction");
            }
            catch (Exception)
            {
                // Ignore exceptions during disposal
            }
            dotNetRef.Dispose();
        }
    }
}

<style>
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
        pointer-events: none;
    }

    .toast {
        background-color: #28a745;
        color: white;
        padding: 12px 24px;
        border-radius: 8px;
        margin-bottom: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        transform: translateX(100%);
        transition: transform 0.3s ease, opacity 0.3s ease;
        opacity: 0;
        pointer-events: auto;
        display: flex;
        align-items: center;
        min-width: 200px;
        font-size: 14px;
        font-weight: 500;
    }

    .toast.show {
        transform: translateX(0);
        opacity: 1;
    }

    .toast-icon {
        margin-right: 8px;
        font-size: 16px;
    }

    .toast-success {
        background-color: #28a745;
        border-left: 4px solid #1e7e34;
    }

    .toast-error {
        background-color: #dc3545;
        border-left: 4px solid #c82333;
    }

    .toast-info {
        background-color: #17a2b8;
        border-left: 4px solid #138496;
    }
</style>
