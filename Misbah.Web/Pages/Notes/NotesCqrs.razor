@page "/notes-cqrs"
@using Misbah.Application.Common
@using Misbah.Application.Commands.Notes
@using Misbah.Application.Queries.Notes
@using DomainNote = Misbah.Domain.Entities.Note
@inject IMediator Mediator
@inject NavigationManager Navigation

<div class="container-fluid">
    <div class="row">
        <div class="col">
            <p>
                Keyboard shortcuts:
                <ul>
                    <li><kbd>Ctrl</kbd> + <kbd>P</kbd>: Show Command Palette</li>
                    <li><kbd>Ctrl</kbd> + <kbd>F</kbd>: Search Notes</li>
                    <li><kbd>Ctrl</kbd> + <kbd>S</kbd>: Save Note</li>
                </ul>
            </p>
            
            <div class="row mb-3">
                <div class="col-md-8">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search notes..." @bind="searchTerm" @onkeypress="OnSearchKeyPress">
                        <button class="btn btn-outline-secondary" @onclick="SearchNotes">üîç Search</button>
                        <button class="btn btn-outline-primary" @onclick="LoadAllNotes">üìö All Notes</button>
                        <button class="btn btn-success" @onclick="ShowCreateModal">‚ûï Create Note</button>
                    </div>
                </div>
                <div class="col-md-4">
                    <select class="form-select" @bind="selectedTag" @bind:after="FilterByTagChanged">
                        <option value="">All Tags</option>
                        @if (allTags != null)
                        {
                            @foreach (var tag in allTags)
                            {
                                <option value="@tag">#@tag</option>
                            }
                        }
                    </select>
                </div>
            </div>
            
            @if (loading)
            {
                <div class="d-flex align-items-center">
                    <strong>Loading...</strong>
                    <div class="spinner-border spinner-border-sm ms-2" role="status" aria-hidden="true"></div>
                </div>
            }
            else if (error != null)
            {
                <div class="alert alert-danger" role="alert">
                    <strong>Error:</strong> @error
                </div>
            }
            else if (notes != null)
            {
                <div class="row">
                    <div class="col">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">üìã Notes (@(notes?.Count() ?? 0))</h5>
                                <small class="text-muted">@GetStatsText()</small>
                            </div>
                            <div class="card-body">
                                @if (notes?.Any() != true)
                                {
                                    <div class="text-center text-muted py-4">
                                        <h6>No notes found</h6>
                                        <p>Try creating a new note or adjusting your search criteria.</p>
                                    </div>
                                }
                                else
                                {
                                    <div class="row">
                                        @foreach (var note in notes)
                                        {
                                            <div class="col-md-6 col-lg-4 mb-3">
                                                <div class="card h-100 shadow-sm @(note.IsEmpty ? "border-warning" : "")">
                                                    <div class="card-body">
                                                        <h6 class="card-title">
                                                            @note.Title
                                                            @if (note.IsEmpty)
                                                            {
                                                                <span class="badge bg-warning text-dark ms-1">Empty</span>
                                                            }
                                                        </h6>
                                                        
                                                        <div class="mb-2">
                                                            @if (note.ExtractedTags.Any())
                                                            {
                                                                @foreach (var tag in note.ExtractedTags.Take(3))
                                                                {
                                                                    <span class="badge bg-primary me-1">#@tag</span>
                                                                }
                                                                @if (note.ExtractedTags.Count > 3)
                                                                {
                                                                    <span class="badge bg-secondary">+@(note.ExtractedTags.Count - 3) more</span>
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <span class="text-muted small">No tags</span>
                                                            }
                                                        </div>
                                                        
                                                        <div class="text-muted small">
                                                            <div>üìä @note.WordCount words</div>
                                                            <div>üìÖ Modified: @note.Modified.ToString("MMM dd, HH:mm")</div>
                                                            @if (note.WikiLinks.Any())
                                                            {
                                                                <div>üîó @note.WikiLinks.Count link(s)</div>
                                                            }
                                                        </div>
                                                        
                                                        <div class="mt-2">
                                                            <button class="btn btn-primary btn-sm me-1" @onclick="() => ViewNote(note.Id)">üëÅÔ∏è View</button>
                                                            <button class="btn btn-outline-secondary btn-sm me-1" @onclick="() => EditNote(note.Id)">‚úèÔ∏è Edit</button>
                                                            <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteNote(note.Id)">üóëÔ∏è Delete</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Create Note Modal -->
@if (showCreateModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Note</h5>
                    <button type="button" class="btn-close" @onclick="HideCreateModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Title:</label>
                        <input type="text" class="form-control" @bind="newNoteTitle" placeholder="Enter note title...">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Content (optional):</label>
                        <textarea class="form-control" rows="4" @bind="newNoteContent" placeholder="Enter initial content..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideCreateModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="CreateNote" disabled="@(string.IsNullOrWhiteSpace(newNoteTitle))">Create Note</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<DomainNote>? notes;
    private IEnumerable<string>? allTags;
    private bool loading = false;
    private string? error = null;
    private string searchTerm = "";
    private string selectedTag = "";
    
    // Create modal
    private bool showCreateModal = false;
    private string newNoteTitle = "";
    private string newNoteContent = "";
    
    protected override async Task OnInitializedAsync()
    {
        await LoadAllNotes();
        await LoadAllTags();
    }
    
    private async Task LoadAllNotes()
    {
        try
        {
            loading = true;
            error = null;
            
            var query = new GetAllNotesQuery(includeContent: true, tagFilter: selectedTag);
            notes = await Mediator.QueryAsync(query);
        }
        catch (Exception ex)
        {
            error = $"Failed to load notes: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }
    
    private async Task LoadAllTags()
    {
        try
        {
            var query = new GetAllTagsQuery();
            allTags = await Mediator.QueryAsync(query);
        }
        catch (Exception ex)
        {
            // Tags failing shouldn't break the whole page
            Console.WriteLine($"Failed to load tags: {ex.Message}");
        }
    }
    
    private async Task SearchNotes()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            await LoadAllNotes();
            return;
        }
        
        try
        {
            loading = true;
            error = null;
            
            var query = new SearchNotesQuery(searchTerm);
            notes = await Mediator.QueryAsync(query);
        }
        catch (Exception ex)
        {
            error = $"Search failed: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }
    
    private async Task FilterByTagChanged()
    {
        await LoadAllNotes();
    }
    
    private async Task FilterByTag(ChangeEventArgs e)
    {
        selectedTag = e.Value?.ToString() ?? "";
        await LoadAllNotes();
    }
    
    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchNotes();
        }
    }
    
    private void ShowCreateModal()
    {
        newNoteTitle = "";
        newNoteContent = "";
        showCreateModal = true;
    }
    
    private void HideCreateModal()
    {
        showCreateModal = false;
    }
    
    private async Task CreateNote()
    {
        try
        {
            loading = true;
            var command = new CreateNoteCommand(newNoteTitle, "Notes", newNoteContent);
            var newNote = await Mediator.SendAsync(command);
            
            HideCreateModal();
            await LoadAllNotes(); // Refresh the list
            await LoadAllTags(); // Refresh tags
        }
        catch (Exception ex)
        {
            error = $"Failed to create note: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }
    
    private void ViewNote(string noteId)
    {
        Navigation.NavigateTo($"/notes/{noteId}");
    }
    
    private void EditNote(string noteId)
    {
        Navigation.NavigateTo($"/notes/{noteId}/edit");
    }
    
    private async Task DeleteNote(string noteId)
    {
        if (await ConfirmDelete())
        {
            try
            {
                loading = true;
                var command = new DeleteNoteCommand(noteId);
                await Mediator.SendAsync(command);
                
                await LoadAllNotes(); // Refresh the list
                await LoadAllTags(); // Refresh tags
            }
            catch (Exception ex)
            {
                error = $"Failed to delete note: {ex.Message}";
            }
            finally
            {
                loading = false;
            }
        }
    }
    
    private async Task<bool> ConfirmDelete()
    {
        // In a real app, you'd use a proper confirmation dialog
        // For demo purposes, we'll just return true
        return await Task.FromResult(true);
    }
    
    private string GetStatsText()
    {
        if (notes == null) return "";
        
        var totalWords = notes.Sum(n => n.WordCount);
        var notesWithTags = notes.Count(n => n.ExtractedTags.Any());
        var notesWithLinks = notes.Count(n => n.WikiLinks.Any());
        
        return $"{totalWords:N0} words ‚Ä¢ {notesWithTags} tagged ‚Ä¢ {notesWithLinks} linked";
    }
}
