@using Misbah.Web.Pages.Notes
@namespace Misbah.Web.Components.Pages.Notes
@using Misbah.Core.Models
@using Misbah.Web.Resources
@using Misbah.Core.Services
@using Microsoft.JSInterop
@implements IDisposable
@inject INoteService NoteService
@inject IJSRuntime JS

@code {
    [Parameter] public string? NoteId { get; set; }
    private Note? note;
    private bool isPreviewMode = false;
    private bool useLiveView = false; // New option for Obsidian-style editing
    private string currentTheme = "light";
    private TrueLiveMarkdownEditor? editorRef;
    
    // JavaScript interop for Ctrl+S handling
    private DotNetObjectReference<NoteEditor>? dotNetRef;
    private bool isCtrlSRegistered = false;

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(NoteId))
        {
            note = NoteService.LoadNote(NoteId);
            if (note == null)
            {
                // Fallback: create a dummy note to avoid null reference and show error
                note = new Note { Id = NoteId ?? "", Title = "(Note not found)", Content = "Could not load note with ID: " + NoteId, FilePath = "" };
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isCtrlSRegistered)
        {
            try
            {
                Console.WriteLine("Waiting for Misbah API to be ready...");
                
                // Wait for the API to be ready using the global promise
                await JS.InvokeVoidAsync("eval", @"
                    window.misbahApiReady.then(() => {
                        console.log('✅ API ready for Blazor registration');
                    }).catch((err) => {
                        console.error('❌ API failed to load:', err);
                    });
                    return window.misbahApiReady;
                ");
                
                // Double-check that everything is available
                var isReady = await JS.InvokeAsync<bool>("eval", 
                    "!!(window.misbah && window.misbah.api && window.blazorHelpers && window.blazorHelpers.registerSaveFunction)");
                
                if (!isReady)
                {
                    Console.WriteLine("API objects not available after promise resolved");
                    return;
                }
                
                // Register Ctrl+S functionality
                dotNetRef = DotNetObjectReference.Create(this);
                await JS.InvokeVoidAsync("blazorHelpers.registerSaveFunction", dotNetRef, nameof(HandleCtrlS));
                isCtrlSRegistered = true;
                
                Console.WriteLine("Ctrl+S save function registered successfully");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to register Ctrl+S save function: {ex.Message}");
            }
        }
    }

    private async Task OnContentChanged(string content)
    {
        if (note != null)
        {
            note.Content = content;
            // Auto-save after content changes
            await SaveNote();
        }
    }

    private async Task SaveNote()
    {
        if (note != null)
        {
            try
            {
                NoteService.SaveNote(note);
                StateHasChanged();
                
                // Show success toast
                await JS.InvokeVoidAsync("eval", "window.misbah.api.toast.success('Note saved successfully! ✓')");
            }
            catch (Exception)
            {
                // Show error toast
                await JS.InvokeVoidAsync("eval", "window.misbah.api.toast.error('Failed to save note')");
            }
        }
    }

    private Task TogglePreviewMode()
    {
        isPreviewMode = !isPreviewMode;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task ToggleLiveView()
    {
        useLiveView = !useLiveView;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task ToggleTheme()
    {
        currentTheme = currentTheme == "light" ? "dark" : "light";
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public async Task HandleCtrlS()
    {
        await SaveNote();
    }

    public void Dispose()
    {
        // Unregister Ctrl+S functionality
        if (isCtrlSRegistered && dotNetRef != null)
        {
            try
            {
                JS.InvokeVoidAsync("blazorHelpers.unregisterSaveFunction");
            }
            catch (Exception)
            {
                // Ignore exceptions during disposal
            }
            dotNetRef.Dispose();
        }
    }
}

<!-- Toast notification container -->
<div id="toast-container" class="toast-container"></div>

@if (note != null && note.Title != "(Note not found)")
{
    <div class="note-editor-container">
        <!-- Header with controls -->
        <div class="note-editor-header">
            <h2 class="note-title">@note.Title</h2>
            <div class="editor-controls">
                <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleLiveView">
                    <i class="fas @(useLiveView ? "fa-code" : "fa-eye")"></i>
                    @(useLiveView ? "Code Editor" : "Live View")
                </button>
                @if (!useLiveView)
                {
                    <button class="btn btn-sm btn-outline-secondary" @onclick="TogglePreviewMode">
                        <i class="fas @(isPreviewMode ? "fa-edit" : "fa-eye")"></i>
                        @(isPreviewMode ? AppStrings.Edit : AppStrings.Preview)
                    </button>
                }
                <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleTheme">
                    <i class="fas @(currentTheme == "light" ? "fa-moon" : "fa-sun")"></i>
                    @(currentTheme == "light" ? "Dark" : "Light")
                </button>
            </div>
        </div>

        <!-- Content area -->
        <div class="note-content">
            @if (isPreviewMode)
            {
                <!-- Pure HTML preview -->
                <div class="markdown-preview">
                    @((MarkupString)Markdig.Markdown.ToHtml(note.Content ?? ""))
                </div>
            }
            else
            {
                <!-- Unified markdown editor -->
                <TrueLiveMarkdownEditor @ref="editorRef"
                                        Content="@(note.Content ?? "")"
                                        ContentChanged="OnContentChanged"
                                        Height="calc(100vh - 200px)"
                                        Theme="@currentTheme" />
            }
        </div>
    </div>
}
else if (note != null && note.Title == "(Note not found)")
{
    <div class="no-note-selected">
        <i class="fas fa-exclamation-triangle fa-3x text-danger mb-3"></i>
        <p class="text-danger">Note not found. Please check the note ID or your data source.</p>
        <p class="text-muted">@note.Content</p>
    </div>
}
else
{
    <div class="no-note-selected">
        <i class="fas fa-file-alt fa-3x text-muted mb-3"></i>
        <p class="text-muted">@AppStrings.SelectNoteToViewOrEdit</p>
    </div>
}

<style>
    .note-editor-container {
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .note-editor-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border-bottom: 1px solid #e5e7eb;
        background: #f9fafb;
    }

    .note-title {
        margin: 0;
        font-size: 1.5rem;
        font-weight: 600;
        color: #1f2937;
    }

    .editor-controls {
        display: flex;
        gap: 0.5rem;
    }

    .editor-controls .btn {
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .note-content {
        flex: 1;
        padding: 1rem;
        overflow: hidden;
    }

    .markdown-preview {
        height: calc(100vh - 200px);
        overflow-y: auto;
        padding: 1rem;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        background: white;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        line-height: 1.6;
    }

    .markdown-preview h1, .markdown-preview h2, .markdown-preview h3,
    .markdown-preview h4, .markdown-preview h5, .markdown-preview h6 {
        margin-top: 1.5rem;
        margin-bottom: 1rem;
        font-weight: 600;
    }

    .markdown-preview h1 { font-size: 2rem; color: #1f2937; }
    .markdown-preview h2 { font-size: 1.5rem; color: #374151; }
    .markdown-preview h3 { font-size: 1.25rem; color: #4b5563; }

    .markdown-preview p {
        margin-bottom: 1rem;
    }

    .markdown-preview code {
        background-color: #f3f4f6;
        padding: 0.125rem 0.25rem;
        border-radius: 0.25rem;
        font-family: 'Consolas', 'Monaco', monospace;
        font-size: 0.875rem;
    }

    .markdown-preview pre {
        background-color: #f8fafc;
        padding: 1rem;
        border-radius: 0.5rem;
        overflow-x: auto;
        margin: 1rem 0;
    }

    .markdown-preview blockquote {
        border-left: 4px solid #e5e7eb;
        padding-left: 1rem;
        margin: 1rem 0;
        color: #6b7280;
        font-style: italic;
    }

    .markdown-preview ul, .markdown-preview ol {
        margin: 1rem 0;
        padding-left: 2rem;
    }

    .markdown-preview li {
        margin: 0.25rem 0;
    }

    .no-note-selected {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        text-align: center;
    }

    /* Toast Notification Styles */
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
        pointer-events: none;
    }

    .toast {
        background-color: #28a745;
        color: white;
        padding: 12px 24px;
        border-radius: 8px;
        margin-bottom: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        transform: translateX(100%);
        transition: transform 0.3s ease, opacity 0.3s ease;
        opacity: 0;
        pointer-events: auto;
        display: flex;
        align-items: center;
        min-width: 200px;
        font-size: 14px;
        font-weight: 500;
    }

    .toast.show {
        transform: translateX(0);
        opacity: 1;
    }

    .toast-icon {
        margin-right: 8px;
        font-size: 16px;
    }

    .toast-success {
        background-color: #28a745;
        border-left: 4px solid #1e7e34;
    }

    .toast-error {
        background-color: #dc3545;
        border-left: 4px solid #c82333;
    }

    .toast-info {
        background-color: #17a2b8;
        border-left: 4px solid #138496;
    }
</style>
