@namespace Misbah.Web.Components.Pages.Notes
@using Misbah.Application.Interfaces
@using Misbah.Domain.Entities
@using Misbah.Web.Components.Pages.Notes
@using Misbah.Web.Resources
@inject INoteApplicationService NoteService
@inject IFolderApplicationService FolderService
@inject NavigationManager Navigation

@* Explicit alias to avoid ambiguity between Domain and Core models *@
@using DomainNote = Misbah.Domain.Entities.Note
@using DomainFolderNode = Misbah.Domain.Entities.FolderNode

<div class="note-list-container">
    <div class="note-list-header">
        <button @onclick="() => _showFolders = !_showFolders" class="toggle-folders-btn">
            @(_showFolders ? AppStrings.HideFolders : AppStrings.ShowFolders)
        </button>
        @if (!string.IsNullOrEmpty(currentFolderPath))
        {
            <button @onclick="RefreshNotes" class="refresh-btn" title="Refresh Notes">
                ðŸ”„
            </button>
        }
    </div>

    @if (_showFolders)
    {
        <div class="folder-section">
            <FolderTreeClean OnFolderSelected="OnFolderSelected" />
        </div>
    }

    <div class="notes-section">
        <h3 class="notes-title">
            @AppStrings.Notes
            @if (!string.IsNullOrEmpty(currentFolderPath))
            {
                <span class="folder-indicator">(@System.IO.Path.GetFileName(currentFolderPath))</span>
            }
        </h3>

        <div class="notes-list">
            @if (isLoading)
            {
                <div class="loading-state">
                    <em>Loading notes...</em>
                </div>
            }
            else if (_notes?.Any() == true)
            {
                @foreach (var note in _notes)
                {
                    <div class="note-item @(_selectedNoteId == note.Id ? "selected" : "")" 
                         @onclick="() => SelectNote(note.Id)">
                        <div class="note-title">@note.Title</div>
                        <div class="note-metadata">
                            @if (note.Tags?.Any() == true)
                            {
                                <div class="note-tags">
                                    @foreach (var tag in note.Tags.Take(3))
                                    {
                                        <span class="tag">@tag</span>
                                    }
                                    @if (note.Tags.Count > 3)
                                    {
                                        <span class="tag-more">+@(note.Tags.Count - 3)</span>
                                    }
                                </div>
                            }
                            @if (note.Modified != default)
                            {
                                <div class="note-date">
                                    @note.Modified.ToString("MMM dd, yyyy")
                                </div>
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state">
                    <em>@AppStrings.NoNotesFound</em>
                    @if (!string.IsNullOrEmpty(currentFolderPath))
                    {
                        <div class="empty-actions">
                            <button @onclick="CreateNewNote" class="create-note-btn">
                                Create First Note
                            </button>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public string? RootPath { get; set; }
    [Parameter] public EventCallback<string> OnNoteSelected { get; set; }

    private IEnumerable<DomainNote>? _notes;
    private string? _selectedNoteId;
    private bool _showFolders = true;
    private bool isLoading = false;
    private string? currentFolderPath;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(RootPath))
        {
            NoteService.SetRootPath(RootPath);
            FolderService.SetRootPath(RootPath);
            currentFolderPath = RootPath;
            await LoadNotesAsync();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(RootPath))
        {
            NoteService.SetRootPath(RootPath);
            FolderService.SetRootPath(RootPath);
            if (currentFolderPath != RootPath)
            {
                currentFolderPath = RootPath;
                await LoadNotesAsync();
            }
        }
    }

    private async Task LoadNotesAsync()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            _notes = await NoteService.GetAllNotesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading notes: {ex.Message}");
            _notes = Enumerable.Empty<DomainNote>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshNotes()
    {
        await LoadNotesAsync();
    }

    private async Task OnFolderSelected(DomainFolderNode folder)
    {
        currentFolderPath = folder.Path;
        await LoadNotesAsync();
        StateHasChanged();
    }

    private async Task SelectNote(string id)
    {
        _selectedNoteId = id;
        await OnNoteSelected.InvokeAsync(id);
        Navigation.NavigateTo($"/notes/{Uri.EscapeDataString(id)}");
    }

    private async Task CreateNewNote()
    {
        if (!string.IsNullOrEmpty(currentFolderPath))
        {
            try
            {
                var newNote = await NoteService.CreateNoteAsync(currentFolderPath, "New Note");
                await LoadNotesAsync();
                await SelectNote(newNote.Id);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error creating note: {ex.Message}");
            }
        }
    }
}

<style>
    .note-list-container {
        display: flex;
        flex-direction: column;
        height: 100%;
        background: var(--surface-color, #ffffff);
        border-radius: 8px;
        overflow: hidden;
    }

    .note-list-header {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 12px 16px;
        border-bottom: 1px solid var(--border-color, #e0e0e0);
        background: var(--header-bg, #f8f9fa);
    }

    .toggle-folders-btn {
        background: var(--primary-color, #007bff);
        color: white;
        border: none;
        padding: 6px 12px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        transition: background-color 0.2s ease;
    }

    .toggle-folders-btn:hover {
        background: var(--primary-hover, #0056b3);
    }

    .refresh-btn {
        background: transparent;
        border: 1px solid var(--border-color, #e0e0e0);
        border-radius: 4px;
        padding: 6px 8px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.2s ease;
    }

    .refresh-btn:hover {
        background: var(--hover-bg, #f0f0f0);
    }

    .folder-section {
        border-bottom: 1px solid var(--border-color, #e0e0e0);
        max-height: 200px;
        overflow-y: auto;
    }

    .notes-section {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    .notes-title {
        margin: 0;
        padding: 16px;
        font-size: 18px;
        font-weight: 600;
        color: var(--text-primary, #333);
        border-bottom: 1px solid var(--border-color, #e0e0e0);
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .folder-indicator {
        font-size: 14px;
        font-weight: 400;
        color: var(--text-secondary, #666);
    }

    .notes-list {
        flex: 1;
        overflow-y: auto;
        padding: 8px;
    }

    .note-item {
        padding: 12px;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.2s ease, transform 0.1s ease;
        border: 1px solid transparent;
        margin-bottom: 4px;
    }

    .note-item:hover {
        background: var(--hover-bg, #f8f9fa);
        transform: translateY(-1px);
    }

    .note-item.selected {
        background: var(--primary-light, #e3f2fd);
        border-color: var(--primary-color, #007bff);
    }

    .note-title {
        font-weight: 500;
        color: var(--text-primary, #333);
        margin-bottom: 4px;
        line-height: 1.3;
    }

    .note-metadata {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .note-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 4px;
    }

    .tag {
        background: var(--tag-bg, #e9ecef);
        color: var(--tag-text, #495057);
        padding: 2px 6px;
        border-radius: 10px;
        font-size: 11px;
        font-weight: 500;
    }

    .tag-more {
        background: var(--tag-more-bg, #6c757d);
        color: white;
        padding: 2px 6px;
        border-radius: 10px;
        font-size: 11px;
        font-weight: 500;
    }

    .note-date {
        font-size: 12px;
        color: var(--text-secondary, #666);
    }

    .loading-state, .empty-state {
        padding: 24px;
        text-align: center;
        color: var(--text-secondary, #666);
    }

    .empty-actions {
        margin-top: 16px;
    }

    .create-note-btn {
        background: var(--success-color, #28a745);
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        transition: background-color 0.2s ease;
    }

    .create-note-btn:hover {
        background: var(--success-hover, #218838);
    }

    @@media (prefers-color-scheme: dark) {
        .note-list-container {
            background: var(--dark-surface, #1e1e1e);
        }

        .note-list-header {
            background: var(--dark-header-bg, #2d2d2d);
            border-bottom-color: var(--dark-border, #404040);
        }

        .notes-title {
            color: var(--dark-text-primary, #ffffff);
            border-bottom-color: var(--dark-border, #404040);
        }

        .folder-indicator {
            color: var(--dark-text-secondary, #b0b0b0);
        }

        .note-item {
            color: var(--dark-text-primary, #ffffff);
        }

        .note-item:hover {
            background: var(--dark-hover-bg, #333333);
        }

        .note-item.selected {
            background: var(--dark-primary-light, #1a365d);
            border-color: var(--dark-primary, #3182ce);
        }

        .note-title {
            color: var(--dark-text-primary, #ffffff);
        }

        .note-date {
            color: var(--dark-text-secondary, #b0b0b0);
        }

        .tag {
            background: var(--dark-tag-bg, #404040);
            color: var(--dark-tag-text, #e0e0e0);
        }

        .loading-state, .empty-state {
            color: var(--dark-text-secondary, #b0b0b0);
        }

        .refresh-btn {
            border-color: var(--dark-border, #404040);
            color: var(--dark-text-primary, #ffffff);
        }

        .refresh-btn:hover {
            background: var(--dark-hover-bg, #333333);
        }
    }
</style>
