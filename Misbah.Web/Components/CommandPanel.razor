@inject Misbah.Web.Services.GitCommandService GitCommandService
@using Microsoft.AspNetCore.Components

@if (showPanel)
{
    <div class="command-panel-overlay" @onclick="ClosePanel">
        <div class="command-panel" @onclick:stopPropagation="true">
            @if (!showGitLogs)
            {
                <input @bind="searchText" @bind:event="oninput" placeholder="Type to search..." class="command-search" @ref="searchInput" />
                <div class="command-options">
                    @foreach (var option in options.Where(o => string.IsNullOrEmpty(searchText) || o.Contains(searchText, StringComparison.OrdinalIgnoreCase)))
                    {
                        <div class="command-option" @onclick="() => SelectOption(option)">@option</div>
                    }
                </div>
            }
            else
            {
                <div class="command-header">
                    <h3>Git Command History</h3>
                    <button class="close-btn" @onclick="ClosePanel">&times;</button>
                </div>
                <div class="git-logs">
                    @if (GitCommandService.GetCommands().Any())
                    {
                        @foreach (var entry in GitCommandService.GetCommands())
                        {
                            <div class="git-entry">
                                <span class="git-timestamp">@entry.Timestamp.ToString("HH:mm:ss")</span>
                                <span class="git-command">@entry.Command</span>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="no-commands">No git commands recorded yet.</div>
                    }
                </div>
            }
        </div>
    </div>
}

<style>
.command-panel-overlay {
    position: fixed;
    top: 0; left: 0; right: 0; bottom: 0;
    background: rgba(0,0,0,0.5);
    z-index: 1000;
    display: flex;
    align-items: flex-start;
    justify-content: center;
    padding-top: 10vh;
}

.command-panel {
    background: #fff;
    border-radius: 8px;
    width: 600px;
    max-width: 90vw;
    max-height: 70vh;
    box-shadow: 0 4px 20px rgba(0,0,0,0.3);
    overflow: hidden;
}

.command-search {
    width: 100%;
    padding: 1rem;
    border: none;
    border-bottom: 1px solid #e0e0e0;
    font-size: 1.1rem;
    outline: none;
}

.command-options {
    max-height: 300px;
    overflow-y: auto;
}

.command-option {
    padding: 0.8rem 1rem;
    cursor: pointer;
    border-bottom: 1px solid #f5f5f5;
    transition: background-color 0.2s;
}

.command-option:hover {
    background-color: #f0f0f0;
}

.command-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    border-bottom: 1px solid #e0e0e0;
    background-color: #f8f9fa;
}

.command-header h3 {
    margin: 0;
    color: #333;
}

.close-btn {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #666;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background-color 0.2s;
}

.close-btn:hover {
    background-color: #e0e0e0;
}

.git-logs {
    max-height: 400px;
    overflow-y: auto;
    padding: 0.5rem;
}

.git-entry {
    display: flex;
    padding: 0.5rem;
    border-bottom: 1px solid #f0f0f0;
    font-family: 'Consolas', 'Monaco', monospace;
    font-size: 0.9rem;
}

.git-timestamp {
    flex-shrink: 0;
    width: 70px;
    color: #666;
    margin-right: 1rem;
}

.git-command {
    flex: 1;
    color: #333;
}

.no-commands {
    padding: 2rem;
    text-align: center;
    color: #666;
    font-style: italic;
}
</style>

@code {
    private bool showPanel = false;
    private bool showGitLogs = false;
    private string searchText = "";
    private List<string> options = new() { "View Git Logs" };
    private ElementReference searchInput;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (showPanel && !showGitLogs && searchInput.Context != null)
        {
            await searchInput.FocusAsync();
        }
    }

    public void OpenPanel()
    {
        showPanel = true;
        showGitLogs = false;
        searchText = "";
        StateHasChanged();
    }

    private void SelectOption(string option)
    {
        if (option == "View Git Logs")
        {
            showGitLogs = true;
            StateHasChanged();
        }
    }

    private void ClosePanel()
    {
        showPanel = false;
        showGitLogs = false;
        StateHasChanged();
    }
}
