@* Example of using AutoSyncCoordinator in a Blazor component *@
@using Misbah.Core.Services
@using Misbah.Core.Models
@inject IAutoSyncCoordinator AutoSyncCoordinator
@inject INoteService NoteService
@inject ILogger<NoteEditor> Logger

<div class="note-editor">
    <div class="toolbar">
        <button @onclick="SaveNow" class="btn btn-primary">Save Now</button>
        <button @onclick="SyncNow" class="btn btn-secondary">Sync Now</button>
        <span class="status">
            Git Status: @AutoSyncCoordinator.GitSyncStatus
            @if (!string.IsNullOrEmpty(AutoSyncCoordinator.CurrentFilePath))
            {
                <br />
                <text>Auto-saving: @System.IO.Path.GetFileName(AutoSyncCoordinator.CurrentFilePath)</text>
            }
        </span>
    </div>
    
    <textarea @bind="noteContent" @bind:event="oninput" 
              @onblur="OnBlur" 
              class="form-control note-textarea"
              placeholder="Write your note here..."
              rows="20"></textarea>
</div>

@code {
    [Parameter] public string? FilePath { get; set; }
    
    private string noteContent = "";
    private Note? currentNote;
    private bool hasUnsavedChanges;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(FilePath) && FilePath != currentNote?.FilePath)
        {
            await LoadNote(FilePath);
        }
    }

    private async Task LoadNote(string filePath)
    {
        try
        {
            currentNote = NoteService.LoadNote(filePath);
            noteContent = currentNote.Content;
            hasUnsavedChanges = false;

            // Start auto-save for this file
            await AutoSyncCoordinator.StartAutoSaveForFileAsync(filePath, SaveCurrentNote);
            
            Logger.LogInformation("Loaded note and started auto-save: {FilePath}", filePath);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load note: {FilePath}", filePath);
        }
    }

    private async Task SaveCurrentNote()
    {
        if (currentNote == null) return;

        try
        {
            currentNote.Content = noteContent;
            currentNote.Modified = DateTime.Now;
            
            await NoteService.SaveNoteAsync(currentNote);
            hasUnsavedChanges = false;
            
            Logger.LogDebug("Saved note: {FilePath}", currentNote.FilePath);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to save note: {FilePath}", currentNote.FilePath);
        }
    }

    private async Task SaveNow()
    {
        await SaveCurrentNote();
        StateHasChanged(); // Update UI to show saved state
    }

    private async Task SyncNow()
    {
        try
        {
            await AutoSyncCoordinator.SaveAndSyncNowAsync();
            Logger.LogInformation("Manual sync completed");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to sync");
        }
    }

    private void OnBlur()
    {
        // When user leaves the textarea, trigger a save
        hasUnsavedChanges = true;
        _ = Task.Run(SaveCurrentNote);
    }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the coordinator is running
        if (!AutoSyncCoordinator.IsRunning)
        {
            Logger.LogWarning("AutoSyncCoordinator is not running");
        }
    }

    public async ValueTask DisposeAsync()
    {
        // Stop auto-save when component is disposed
        try
        {
            await AutoSyncCoordinator.StopAutoSaveAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error stopping auto-save");
        }
    }
}

<style>
    .note-editor {
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .toolbar {
        padding: 10px;
        border-bottom: 1px solid #ccc;
        background-color: #f8f9fa;
    }

    .note-textarea {
        flex: 1;
        border: none;
        resize: none;
        font-family: 'Courier New', monospace;
        padding: 15px;
    }

    .status {
        float: right;
        font-size: 0.9em;
        color: #666;
    }
</style>
