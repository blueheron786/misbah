@namespace Misbah.UI.Components
@using Misbah.Core.Models
@inject Misbah.Core.Utils.SearchService SearchService
@inject IJSRuntime JS

<div class="search-popup" tabindex="0" @onkeydown="HandleKeyDown">
<input @bind="_query" @oninput="OnInput" placeholder="Search notes... (Ctrl+O)" autofocus class="search-input" />
    <ul class="search-results">
        @if (_results != null && _results.Count > 0)
        {
            int idx = 0;
            foreach (var note in _results)
            {
                <li class="search-result-item @(idx == _selectedIndex ? "selected" : null)" @onclick="() => SelectNote(note.Id)">
                    <span>@note.Title</span>
                </li>
                idx++;
            }
        }
        else if (!string.IsNullOrWhiteSpace(_query))
        {
            <li class="no-results">No results</li>
        }
    </ul>
</div>

@code {
    private string _query = string.Empty;
    private List<Note> _results = new();
    private int _selectedIndex = 0;
    [Parameter] public EventCallback<string> OnNoteSelected { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }



    private void OnInput(ChangeEventArgs e)
    {
        _query = e.Value?.ToString() ?? string.Empty;
        UpdateResults();
    }

    private void UpdateResults()
    {
        if (string.IsNullOrWhiteSpace(_query))
        {
            _results = new();
        }
        else
        {
            _results = SearchService.Search(_query)
                .OrderByDescending(n => Score(n, _query))
                .Take(10)
                .ToList();
        }
        _selectedIndex = 0;
        StateHasChanged();
    }

    private double Score(Note note, string query)
    {
        // Simple scoring: title match > tag match > content match
        query = query.ToLower();
        if (note.Title?.ToLower().Contains(query) == true) return 3;
        if (note.Tags.Any(t => t.ToLower().Contains(query))) return 2;
        if (note.Content?.ToLower().Contains(query) == true) return 1;
        return 0;
    }

    private void SelectNote(string noteId)
    {
        OnNoteSelected.InvokeAsync(noteId);
        OnClose.InvokeAsync();
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
        {
            OnClose.InvokeAsync();
        }
        else if (e.Key == "ArrowDown")
        {
            if (_results.Count > 0)
                _selectedIndex = Math.Min(_selectedIndex + 1, _results.Count - 1);
        }
        else if (e.Key == "ArrowUp")
        {
            if (_results.Count > 0)
                _selectedIndex = Math.Max(_selectedIndex - 1, 0);
        }
        else if (e.Key == "Enter")
        {
            if (_results.Count > 0)
                SelectNote(_results[_selectedIndex].Id);
        }
    }
}
