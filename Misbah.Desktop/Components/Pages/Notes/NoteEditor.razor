@namespace Misbah.Desktop.Components.Pages.Notes
@using Misbah.Core.Models
@using Misbah.Desktop.Resources
@using Misbah.Core.Services
@inject INoteService NoteService
@inject IJSRuntime JS

@code {
    [Parameter] public string NoteId { get; set; }
    private Note note;
    private bool isLiveEditMode = true;
    private bool isPreviewMode = false;
    private bool useLiveView = false; // New option for Obsidian-style editing
    private string currentTheme = "light";
    private LiveMarkdownEditor? editorRef;
    private LiveViewMarkdownEditor? liveViewEditorRef;

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(NoteId))
        {
            note = NoteService.LoadNote(NoteId);
        }
    }

    private async Task OnContentChanged(string content)
    {
        if (note != null)
        {
            note.Content = content;
            // Auto-save after content changes
            await SaveNote();
        }
    }

    private Task SaveNote()
    {
        if (note != null)
        {
            NoteService.SaveNote(note);
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    private Task TogglePreviewMode()
    {
        isPreviewMode = !isPreviewMode;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task ToggleLiveView()
    {
        useLiveView = !useLiveView;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task ToggleTheme()
    {
        currentTheme = currentTheme == "light" ? "dark" : "light";
        if (editorRef != null)
        {
            await editorRef.SetTheme(currentTheme);
        }
    }

    private async Task FocusEditor()
    {
        if (editorRef != null)
        {
            await editorRef.Focus();
        }
    }
}

@if (note != null)
{
    <div class="note-editor-container">
        <!-- Header with controls -->
        <div class="note-editor-header">
            <h2 class="note-title">@note.Title</h2>
            <div class="editor-controls">
                <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleLiveView">
                    <i class="fas @(useLiveView ? "fa-code" : "fa-eye")"></i>
                    @(useLiveView ? "Code Editor" : "Live View")
                </button>
                @if (!useLiveView)
                {
                    <button class="btn btn-sm btn-outline-secondary" @onclick="TogglePreviewMode">
                        <i class="fas @(isPreviewMode ? "fa-edit" : "fa-eye")"></i>
                        @(isPreviewMode ? AppStrings.Edit : AppStrings.Preview)
                    </button>
                }
                <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleTheme">
                    <i class="fas @(currentTheme == "light" ? "fa-moon" : "fa-sun")"></i>
                    @(currentTheme == "light" ? "Dark" : "Light")
                </button>
                @if (!useLiveView)
                {
                    <button class="btn btn-sm btn-outline-secondary" @onclick="FocusEditor">
                        <i class="fas fa-mouse-pointer"></i>
                        Focus
                    </button>
                }
            </div>
        </div>

        <!-- Content area -->
        <div class="note-content">
            @if (useLiveView)
            {
                <!-- Obsidian-style live view editor -->
                <LiveViewMarkdownEditor @ref="liveViewEditorRef"
                                        Content="@(note.Content ?? "")"
                                        ContentChanged="OnContentChanged"
                                        Height="calc(100vh - 200px)"
                                        Theme="@currentTheme" />
            }
            else if (isPreviewMode)
            {
                <!-- Pure HTML preview -->
                <div class="markdown-preview">
                    @((MarkupString)Markdig.Markdown.ToHtml(note.Content ?? ""))
                </div>
            }
            else
            {
                <!-- Traditional live markdown editor -->
                <LiveMarkdownEditor @ref="editorRef"
                                    Content="@(note.Content ?? "")"
                                    ContentChanged="OnContentChanged"
                                    Height="calc(100vh - 200px)"
                                    Theme="@currentTheme"
                                    AutoSave="true"
                                    AutoSaveDelay="1000" />
            }
        </div>
    </div>
}
else
{
    <div class="no-note-selected">
        <i class="fas fa-file-alt fa-3x text-muted mb-3"></i>
        <p class="text-muted">@AppStrings.SelectNoteToViewOrEdit</p>
    </div>
}

<style>
    .note-editor-container {
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .note-editor-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border-bottom: 1px solid #e5e7eb;
        background: #f9fafb;
    }

    .note-title {
        margin: 0;
        font-size: 1.5rem;
        font-weight: 600;
        color: #1f2937;
    }

    .editor-controls {
        display: flex;
        gap: 0.5rem;
    }

    .editor-controls .btn {
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .note-content {
        flex: 1;
        padding: 1rem;
        overflow: hidden;
    }

    .markdown-preview {
        height: calc(100vh - 200px);
        overflow-y: auto;
        padding: 1rem;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        background: white;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        line-height: 1.6;
    }

    .markdown-preview h1, .markdown-preview h2, .markdown-preview h3,
    .markdown-preview h4, .markdown-preview h5, .markdown-preview h6 {
        margin-top: 1.5rem;
        margin-bottom: 1rem;
        font-weight: 600;
    }

    .markdown-preview h1 { font-size: 2rem; color: #1f2937; }
    .markdown-preview h2 { font-size: 1.5rem; color: #374151; }
    .markdown-preview h3 { font-size: 1.25rem; color: #4b5563; }

    .markdown-preview p {
        margin-bottom: 1rem;
    }

    .markdown-preview code {
        background-color: #f3f4f6;
        padding: 0.125rem 0.25rem;
        border-radius: 0.25rem;
        font-family: 'Consolas', 'Monaco', monospace;
        font-size: 0.875rem;
    }

    .markdown-preview pre {
        background-color: #f8fafc;
        padding: 1rem;
        border-radius: 0.5rem;
        overflow-x: auto;
        margin: 1rem 0;
    }

    .markdown-preview blockquote {
        border-left: 4px solid #e5e7eb;
        padding-left: 1rem;
        margin: 1rem 0;
        color: #6b7280;
        font-style: italic;
    }

    .markdown-preview ul, .markdown-preview ol {
        margin: 1rem 0;
        padding-left: 2rem;
    }

    .markdown-preview li {
        margin: 0.25rem 0;
    }

    .no-note-selected {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        text-align: center;
    }
</style>
