
<style>
.misbah-code {
    background: #23272e;
    color: #e6e6e6;
    font-family: 'Fira Mono', 'Consolas', 'Menlo', 'Monaco', monospace;
    font-size: 0.98em;
    border-radius: 4px;
    padding: 0.2em 0.5em;
    margin: 0.1em 0;
    display: inline-block;
    white-space: pre;
}
pre.misbah-code {
    display: block;
    padding: 1em;
    overflow-x: auto;
}
</style>
@page "/notes/{NoteId}"
@using Misbah.Core.Models
@using Misbah.Desktop.Resources
@using Microsoft.JSInterop
@using Markdig
@using Misbah.Desktop.Components.Pages.Notes
@using Misbah.Desktop.Components
@inject Misbah.Core.Services.INoteService NoteService
@inject IJSRuntime JSRuntime
@inject Misbah.Core.Services.MarkdownRenderer MarkdownRenderer

<style>
.misbah-code {
    background: #23272e;
    color: #e6e6e6;
    font-family: 'Fira Mono', 'Consolas', 'Menlo', 'Monaco', monospace;
    font-size: 0.98em;
    border-radius: 4px;
    padding: 0.2em 0.5em;
    margin: 0.1em 0;
    display: inline-block;
    white-space: pre;
}
pre.misbah-code {
    display: block;
    padding: 1em;
    overflow-x: auto;
}
</style>

@code {

    private static NoteView? _instance;
    private static bool _jsHandlerRegistered = false;

    [Parameter] public string? NoteId { get; set; }
    private Note? note;
    private string? editedContent;

    [JSInvokable("ToggleTask")]
    public static async Task ToggleTask(int line)
    {
        if (_instance != null && _instance.note != null && !string.IsNullOrEmpty(_instance.NoteId))
        {
            var lines = _instance.note.Content.Split('\n');
            if (line >= 0 && line < lines.Length)
            {
                var taskPattern = @"^- \[( |x)\] (.*)$";
                var match = System.Text.RegularExpressions.Regex.Match(lines[line], taskPattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                if (match.Success)
                {
                    bool isChecked = match.Groups[1].Value.ToLower() == "x";
                    string newLine = isChecked ? "- [ ] " + match.Groups[2].Value : "- [x] " + match.Groups[2].Value;
                    lines[line] = newLine;
                    _instance.note.Content = string.Join("\n", lines);
                    _instance.NoteService.SaveNote(_instance.note);
                    // Reload the note from storage to ensure latest content
                    _instance.note = _instance.NoteService.LoadNote(_instance.NoteId);
                    _instance.editedContent = _instance.note.Content;
                    await _instance.InvokeAsync(_instance.StateHasChanged);
                }
            }
        }
    }
    
    protected override void OnParametersSet()
    {
        _instance = this;
        if (!string.IsNullOrEmpty(NoteId))
        {
            note = NoteService.LoadNote(NoteId);
            editedContent = note?.Content;
        }
    }

    private Task OnContentChanged(string content)
    {
        if (note != null)
        {
            note.Content = content;
            NoteService.SaveNote(note); // Auto-save
            StateHasChanged();
        }
        return Task.CompletedTask;
    }


}

@if (note != null)
{
    <div class="note-view">
        <h2>@note.Title</h2>
        
        <!-- WYSIWYG Editor -->
        <WysiwygMarkdownEditor Content="@(note.Content ?? "")"
                               ContentChanged="OnContentChanged"
                               Height="calc(100vh - 200px)"
                               Theme="dark" />
    </div>
}
else
{
    <p>@AppStrings.SelectNoteToViewOrEdit</p>
}
