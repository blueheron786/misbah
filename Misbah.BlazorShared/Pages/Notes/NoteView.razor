@namespace Misbah.BlazorShared.Pages.Notes
@page "/notes/{NoteId}"
@using Misbah.Application.DTOs
@using Misbah.BlazorShared.Resources
@using Microsoft.JSInterop
@inject Misbah.Application.Interfaces.INoteService NoteService
@inject IJSRuntime JSRuntime
@inject Misbah.Application.Services.MarkdownRenderer MarkdownRenderer

@code {
    private static NoteView? _instance;
    private static bool _jsHandlerRegistered = false;

    [Parameter] public string? NoteId { get; set; }
    private NoteDto? note;
    private string? editedContent;

    [JSInvokable("ToggleTask")]
    public static async Task ToggleTask(int line)
    {
        if (_instance != null && _instance.note != null && !string.IsNullOrEmpty(_instance.NoteId))
        {
            var lines = _instance.note.Content.Split('\n');
            if (line >= 0 && line < lines.Length)
            {
                var taskPattern = @"^- \[( |x)\] (.*)$";
                var match = System.Text.RegularExpressions.Regex.Match(lines[line], taskPattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                if (match.Success)
                {
                    bool isChecked = match.Groups[1].Value.ToLower() == "x";
                    string newLine = isChecked ? "- [ ] " + match.Groups[2].Value : "- [x] " + match.Groups[2].Value;
                    lines[line] = newLine;
                    _instance.note.Content = string.Join("\n", lines);
                    await _instance.NoteService.UpdateNoteAsync(_instance.note);
                    _instance.note = await _instance.NoteService.GetNoteByIdAsync(_instance.NoteId);
                    _instance.editedContent = _instance.note.Content;
                    await _instance.InvokeAsync(_instance.StateHasChanged);
                }
            }
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        _instance = this;
        if (!string.IsNullOrEmpty(NoteId))
        {
            note = await NoteService.GetNoteByIdAsync(NoteId);
            editedContent = note?.Content;
        }
    }
    private async Task OnContentChanged(string content)
    {
        if (note != null)
        {
            note.Content = content;
            await NoteService.UpdateNoteAsync(note);
            StateHasChanged();
        }
    }
}

@if (note != null)
{
    <div class="note-view">
        <h2>@note.Title</h2>
        <WysiwygMarkdownEditor Content="@(note.Content ?? "")"
                               ContentChanged="OnContentChanged"
                               Height="calc(100vh - 200px)"
                               Theme="dark" />
    </div>
}
else
{
    <p>@AppStrings.SelectNoteToViewOrEdit</p>
}
